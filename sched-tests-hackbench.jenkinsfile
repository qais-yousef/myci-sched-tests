pipeline {
	agent { label params.NODE }

	parameters {
		string(name: 'NODE', defaultValue: '', description: 'The DUT to run on. Must be Android based DUT.')
		string(name: 'DESCRIPTION', defaultValue: '', description: 'Describe your experiment so that we have a meaningful name for this run to return to')
		booleanParam(name: 'COLLECT_PELT', defaultValue: false, description: 'Collect PELT data and produce plots')
		booleanParam(name: 'COLLECT_UCLAMP', defaultValue: false, description: 'Collect UCLAMP data and produce plots')
		string(name: 'BRANCH', defaultValue: "${MYCI_BRANCH}", description: 'Which branch to run from? For power users experimenting/developing new changes.')
		booleanParam(name: 'RUN_DEX2OAT', defaultValue: false, description: "Run JIT compilation of all apps as a noisy background activity while running the test. We'll honour the specified ITERATIONS and DELAY params.")
		string(name: 'ITERATIONS', defaultValue: '3', description: 'Number of iterations to run')
		string(name: 'DELAY', defaultValue: '10', description: 'Time in seconds to wait between each run.')
		string(name: 'LOOPS', defaultValue: '10000', description: 'Number of loops to perform in each hackbench run.')
	}

	environment {
		MYCI_BRANCH = "${BRANCH}"
	}

	stages {
		stage('Init') {
			steps {
				library "sched-tests-utils@${MYCI_BRANCH}"
				verify_params(!env.COLLECT_PELT || !env.COLLECT_UCLAMP)
				set_description()
			}
		}
		stage('Connect') {
			steps {
				verify_android()
				connect()
				android_wakeup_device()
			}
		}
		stage('Prepare Agenda') {
			steps {
				fixup_agenda("agendas/hackbench.yaml", "ITERATIONS", env.ITERATIONS)
				fixup_agenda("agendas/hackbench.yaml", "DELAY", env.DELAY)
				fixup_agenda("agendas/hackbench.yaml", "LOOPS", env.LOOPS)
				fixup_agenda("agendas/hackbench.yaml", "DEVICE", env.IPADDRESS+":"+env.PORT)
			}
		}
		stage('Run') {
			parallel {
				stage('Hackbench-WA') {
					steps {
						start_perfetto("hackbench")
						run_wa("agendas/hackbench.yaml")
						stop_perfetto()
					}
				}
				stage('dex2oat of all packages') {
					when {
						expression {
							return env.RUN_DEX2OAT == 'true';
						}
					}
					steps {
						run_dex2oat_parallel()
					}
				}
				stage('(Workaround)') {
					steps {
						sleep 3
					}
				}
			}
		}
		stage('Generate Plots') {
			steps {
				plot_wa_results(params.NODE, "hackbench", "execution_time")
				plot_jank()
				plot_pelt(env.COLLECT_PELT == 'true', "hackbench")
				plot_uclamp(env.COLLECT_UCLAMP == 'true', "hackbench")
			}
		}
		stage('tar wa_output') {
			steps {
				tar_wa_output()
			}
		}
		stage('Archive') {
			steps {
				archiveArtifacts artifacts: '*.tar.xz', followSymlinks: false
				archiveArtifacts artifacts: '*.png', followSymlinks: false
				archiveArtifacts artifacts: '*.perfetto-trace', followSymlinks: false, allowEmptyArchive: true
			}
		}
	}
	post {
		always {
			android_doze_device()
			disconnect()
			cleanWs()
		}
	}
}
