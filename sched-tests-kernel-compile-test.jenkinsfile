pipeline {
	agent { label params.NODE }

	parameters {
		string(name: 'NODE', defaultValue: '', description: 'The DUT to run on. Must be Linux based DUT.')
		string(name: 'DESCRIPTION', defaultValue: '', description: 'Describe your experiment so that we have a meaningful name for this run to return to')
		string(name: 'BRANCH', defaultValue: "${MYCI_BRANCH}", description: 'Which branch to run from? For power users experimenting/developing new changes.')
		string(name: 'UCLAMP_MIN', defaultValue: '0', description: 'Parameter to pass to uclampset -m ${UCLAMP_MIN}')
		string(name: 'UCLAMP_MAX', defaultValue: '1024', description: 'Parameter to pass to uclampset -M ${UCLAMP_MAX}')
		string(name: 'NUM_PARALLEL_JOBS', defaultValue: '2', description: 'Parameter to pass to make -j ${NUM_PARALLEL_JOBS}')
	}

	environment {
		MYCI_BRANCH = "${BRANCH}"
	}

	stages {
		stage('Init') {
			steps {
				library "sched-tests-utils@${MYCI_BRANCH}"
				verify_params(!env.UCLAMP_MIN || !env.UCLAMP_MAX || !env.NUM_PARALLEL_JOBS)
				set_description()
			}
		}
		stage('Verify') {
			steps {
				verify_linux()
			}
		}
		stage('Checkout') {
			steps {
				checkout_kernel_tree()
				clobber_kernel_tree()
			}
		}
		stage('Compile') {
			steps {
				start_perfetto("kernel_compile_test", "pelt")
				compile_kernel_tree("v5.15", "kernel_compile_test.log", env.UCLAMP_MIN, env.UCLAMP_MAX, env.NUM_PARALLEL_JOBS)
				stop_perfetto()
			}
		}
		stage('Generate Result') {
			steps {
				plot_kernel_compile_test()
			}
		}
		stage('Archive') {
			steps {
				archiveArtifacts artifacts: '*.log', followSymlinks: false
				archiveArtifacts artifacts: '*.png', followSymlinks: false
				archiveArtifacts artifacts: '*.perfetto-trace', followSymlinks: false, allowEmptyArchive: true
			}
		}
	}
	post {
		always {
			clobber_kernel_tree()
		}
	}
}

