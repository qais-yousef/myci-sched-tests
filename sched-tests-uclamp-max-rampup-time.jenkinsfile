pipeline {
	agent { label params.NODE }

	parameters {
		string(name: 'NODE', defaultValue: '', description: 'The DUT to run on. Must be Linux based DUT.')
		string(name: 'DESCRIPTION', defaultValue: '', description: 'Describe your experiment so that we have a meaningful name for this run to return to')
		string(name: 'BRANCH', defaultValue: "${MYCI_BRANCH}", description: 'Which branch to run from? For power users experimenting/developing new changes.')
		booleanParam(name: 'MAX_PERF', defaultValue: true, description: 'Run rampup test while system is set to max frequency')
		booleanParam(name: 'MIN_PERF', defaultValue: true, description: 'Run rampup test while system is set to min frequency')
		booleanParam(name: 'NORMAL_PERF', defaultValue: true, description: 'Run rampup test while schedutil sets frequency as normal')
	}

	environment {
		MYCI_BRANCH = "${BRANCH}"
	}

	stages {
		stage('Init') {
			steps {
				library "sched-tests-utils@${MYCI_BRANCH}"
				verify_params(!env.MAX_PERF || !env.MIN_PERF || !env.NORMAL_PERF)
				set_description()
			}
		}
		stage('Verify') {
			steps {
				verify_linux()
			}
		}
		stage('Calibrate rt-app') {
			steps {
				calibrate_rt_app()
			}
		}
		stage('Max perf rampup time') {
			when {
				expression {
					return env.MAX_PERF == 'true';
				}
			}
			steps {
				start_perfetto("uclamp_rampup_time_max_perf", "pelt runtime")
				uclamp_rampup_time(1024, 1024, "uclamp_rampup_time_max_perf.csv")
				stop_perfetto()
			}
		}
		stage('Min perf rampup time') {
			when {
				expression {
					return env.MIN_PERF == 'true';
				}
			}
			steps {
				start_perfetto("uclamp_rampup_time_min_perf", "pelt runtime")
				uclamp_rampup_time(0, 0, "uclamp_rampup_time_min_perf.csv")
				stop_perfetto()
			}
		}
		stage('Normal rampup time') {
			when {
				expression {
					return env.NORMAL_PERF == 'true';
				}
			}
			steps {
				start_perfetto("uclamp_rampup_time_normal", "pelt runtime")
				uclamp_rampup_time(0, 1024, "uclamp_rampup_time_normal.csv")
				stop_perfetto()
			}
		}
		stage('Generate Result') {
			steps {
				plot_rampup_time()
				plot_rt_app()
			}
		}
		stage('Archive') {
			steps {
				archiveArtifacts artifacts: '*.csv', followSymlinks: false
				archiveArtifacts artifacts: '*.png', followSymlinks: false
				archiveArtifacts artifacts: '*.perfetto-trace', followSymlinks: false, allowEmptyArchive: true
			}
		}
	}
	post {
		always {
			cleanWs()
		}
	}
}

